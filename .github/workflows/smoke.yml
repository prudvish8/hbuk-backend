name: Smoke (prod)

on:
  push:
    branches:
      - main
      - fix/**
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

env:
  API: https://hbuk-backend-hvow.onrender.com
  HUSKY: "0"   # disable git hooks in CI

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # no scripts so husky/prepare won't run
      - name: Install (no scripts)
        run: npm ci --no-audit --no-fund --ignore-scripts

      - name: Health
        run: |
          set -euo pipefail
          curl -fsS "$API/health" >/dev/null
          curl -fsS "$API/health/db" >/dev/null
          echo "✅ Health OK"

      - name: Register (idempotent)
        env:
          EMAIL: "u${{ github.run_id }}@hbuk.dev"
          PASS: "test123"
        run: |
          # ok to already exist
          curl -sS -X POST "$API/api/register" \
            -H 'Content-Type: application/json' \
            -H 'X-HBUK-SMOKE: 1' \
            -d "{\"email\":\"$EMAIL\",\"password\":\"$PASS\"}" >/dev/null || true
          echo "✅ Register OK"

      - name: Login
        id: auth
        env:
          EMAIL: "u${{ github.run_id }}@hbuk.dev"
          PASS: "test123"
        run: |
          set -euo pipefail
          RESP=$(curl -fsS -X POST "$API/api/login" \
            -H 'Content-Type: application/json' \
            -d "{\"email\":\"$EMAIL\",\"password\":\"$PASS\"}")
          # parse .token with node (no jq dependency)
          TOKEN=$(node -e 'const j=JSON.parse(process.argv[1]); process.stdout.write(j.token||"");' "$RESP")
          if [ -z "$TOKEN" ]; then echo "No token from login"; exit 1; fi
          echo "token=$TOKEN" >> "$GITHUB_OUTPUT"
          echo "✅ Login OK"

      - name: Commit + Verify
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          set -euo pipefail
          CONTENT=$(node -e 'console.log(JSON.stringify({event:"ci-smoke",ts:new Date().toISOString(),source:"github-actions"}))')
          RES=$(curl -fsS -X POST "$API/api/commit" \
            -H "Authorization: Bearer $TOKEN" \
            -H 'Content-Type: application/json' \
            -d "{\"content\":\"$CONTENT\",\"latitude\":45.5,\"longitude\":-122.6,\"locationName\":\"SmokeTest\"}")
          echo "$RES" | node -e 'console.log(JSON.stringify(JSON.parse(require("fs").readFileSync(0,"utf8")), null, 2))'
          ID=$(node -e 'const j=JSON.parse(process.argv[1]); process.stdout.write(j.id||"");' "$RES")
          DIG=$(node -e 'const j=JSON.parse(process.argv[1]); process.stdout.write(j.digest||"");' "$RES")
          if [ -z "$ID" ] || [ -z "$DIG" ]; then echo "Missing id/digest"; exit 1; fi
          VER=$(curl -fsS "$API/api/verify/$ID/$DIG")
          node -e 'process.exit(JSON.parse(process.argv[1]).ok===true?0:1)' "$VER"
          echo "✅ Commit & Verify OK"

      - name: Metrics (token via header; query fallback)
        if: ${{ secrets.HBUK_METRICS_TOKEN != '' }}
        env:
          METRICS_TOKEN: ${{ secrets.HBUK_METRICS_TOKEN }}
        run: |
          # keep this step soft so a bad token doesn't fail the whole job
          set +e
          curl -fsS -H "X-Metrics-Token: $METRICS_TOKEN" "$API/metrics" >/dev/null \
          || curl -fsS "$API/metrics?token=$METRICS_TOKEN" >/dev/null
          EC=$?
          if [ $EC -eq 0 ]; then
            echo "✅ Metrics OK"
            exit 0
          else
            echo "⚠️  Metrics check failed (bad token or endpoint). Skipping."
            exit 0
          fi

      - name: "Metrics (skipped: no token configured)"
        if: ${{ secrets.HBUK_METRICS_TOKEN == '' }}
        run: echo "Skipping metrics (no HBUK_METRICS_TOKEN secret)."
